import numpy as np

from solutions.s0106_train_logistic_regression_with_gradient_descent import train_logreg


def test_case_1():
    result = train_logreg(
        np.array(
            [
                [0.7674, -0.2341, -0.2341, 1.5792],
                [-1.4123, 0.3142, -1.0128, -0.9080],
                [-0.4657, 0.5425, -0.4694, -0.4634],
                [-0.5622, -1.9132, 0.2419, -1.7249],
                [-1.4247, -0.2257, 1.4656, 0.0675],
                [1.8522, -0.2916, -0.6006, -0.6017],
                [0.3756, 0.1109, -0.5443, -1.1509],
                [0.1968, -1.9596, 0.2088, -1.3281],
                [1.5230, -0.1382, 0.4967, 0.6476],
                [-1.2208, -1.0577, -0.0134, 0.8225],
            ]
        ),
        np.array([1, 0, 0, 0, 1, 1, 0, 0, 1, 0]),
        0.001,
        10,
    )

    assert np.allclose(
        result[0], np.array([-0.0097, 0.0286, 0.015, 0.0135, 0.0316]), atol=1e-4
    )
    assert np.allclose(
        result[1],
        np.array(
            [
                6.9315,
                6.9075,
                6.8837,
                6.8601,
                6.8367,
                6.8134,
                6.7904,
                6.7675,
                6.7448,
                6.7223,
            ]
        ),
        atol=1e-4,
    )


def test_case_2():
    result = train_logreg(
        np.array(
            [
                [0.76743473, 1.57921282, -0.46947439],
                [-0.23415337, 1.52302986, -0.23413696],
                [0.11092259, -0.54438272, -1.15099358],
                [-0.60063869, 0.37569802, -0.29169375],
                [-1.91328024, 0.24196227, -1.72491783],
                [-1.01283112, -0.56228753, 0.31424733],
                [-0.1382643, 0.49671415, 0.64768854],
                [-0.46341769, 0.54256004, -0.46572975],
                [-1.4123037, -0.90802408, 1.46564877],
                [0.0675282, -0.2257763, -1.42474819],
            ]
        ),
        np.array([1, 1, 0, 0, 0, 0, 1, 1, 0, 0]),
        0.1,
        10,
    )

    assert np.allclose(
        result[0], np.array([-0.2509, 0.9325, 1.6218, 0.6336]), atol=1e-4
    )
    assert np.allclose(
        result[1],
        np.array(
            [
                6.9315,
                5.5073,
                4.6382,
                4.0609,
                3.6503,
                3.3432,
                3.1045,
                2.9134,
                2.7567,
                2.6258,
            ]
        ),
        atol=1e-4,
    )
